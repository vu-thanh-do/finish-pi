const { parentPort, workerData } = require('worker_threads');
const axios = require('axios');
const qs = require("qs");
const { HttpsProxyAgent } = require('https-proxy-agent');

/**
 * G·ª≠i log t·ª´ worker v·ªÅ thread ch√≠nh
 * @param {string} message - N·ªôi dung log
 * @param {string} type - Lo·∫°i log (info, error, debug)
 */
function workerLog(message, type = 'info') {
  if (parentPort) {
    parentPort.postMessage({ type: 'log', logType: type, message });
  } else {
    console[type === 'error' ? 'error' : 'log'](message);
  }
}

/**
 * G·ª≠i k·∫øt qu·∫£ v·ªÅ thread ch√≠nh
 * @param {Object} data - D·ªØ li·ªáu k·∫øt qu·∫£
 */
function sendResult(data) {
  if (parentPort) {
    parentPort.postMessage({ ...data });
  } else {
    console.log('K·∫øt qu·∫£:', data);
  }
}

/**
 * G·ª≠i th√¥ng b√°o l·ªói v·ªÅ thread ch√≠nh
 * @param {Error|string} error - L·ªói
 * @param {Object} details - Chi ti·∫øt b·ªï sung
 */
function reportError(error, details = {}) {
  const errorMessage = typeof error === 'string' ? error : error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
  workerLog(`‚ùå L·ªói: ${errorMessage}`, 'error');
  
  sendResult({
    success: false,
    error: errorMessage,
    stack: error.stack,
    ...details
  });
}

// Kh·ªüi t·∫°o d·ªØ li·ªáu t·ª´ thread ch√≠nh
const { piknowUser, knowId, proxy, piknowText } = workerData || {};

// Danh s√°ch tin nh·∫Øn m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ n·ªôi dung
const DEFAULT_MESSAGES = [
  "R·∫•t hay v√† b·ªï √≠ch!",
  "Th√¥ng tin qu√° tuy·ªát v·ªùi!",
  "C·∫£m ∆°n v√¨ ki·∫øn th·ª©c n√†y!",
  "T√¥i r·∫•t th√≠ch n·ªôi dung c·ªßa b·∫°n",
  "Th·∫≠t s·ª± h·ªØu √≠ch!",
  "Ti·∫øp t·ª•c cung c·∫•p nh·ªØng ki·∫øn th·ª©c nh∆∞ v·∫≠y!",
  "R·∫•t th√∫ v·ªã!",
  "C√¢u tr·∫£ l·ªùi hay qu√°!",
  "T√¥i h·ªçc ƒë∆∞·ª£c nhi·ªÅu ƒëi·ªÅu t·ª´ b·∫°n",
  "Ki·∫øn th·ª©c ƒë∆∞·ª£c tr√¨nh b√†y r·∫•t r√µ r√†ng",
  "Th√¥ng tin h·ªØu √≠ch!",
  "Tuy·ªát v·ªùi!"
];

// Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
if (!piknowUser || !knowId) {
  reportError('Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt cho PiKnow', {
    userId: piknowUser?.uid,
    knowId
  });
} else {
  // Th·ª±c hi·ªán piknow
  performPiKnow()
    .then(result => sendResult(result))
    .catch(error => reportError(error, {
      userId: piknowUser?.uid,
      knowId
    }));
}

/**
 * Th·ª±c hi·ªán piknow b√†i vi·∫øt
 */
async function performPiKnow() {
  const MAX_RETRIES = 3;
  let retryCount = 0;
  let lastError = null;
  
  // Ki·ªÉm tra v√† chu·∫©n b·ªã n·ªôi dung PiKnow
  let finalPiknowText = piknowText;
  if (!piknowText || piknowText.includes('undefined') || piknowText === ', ...' || piknowText.trim() === '') {
    // N·∫øu kh√¥ng c√≥ n·ªôi dung ho·∫∑c n·ªôi dung kh√¥ng h·ª£p l·ªá, ch·ªçn n·ªôi dung m·∫∑c ƒë·ªãnh
    const randomIndex = Math.floor(Math.random() * DEFAULT_MESSAGES.length);
    finalPiknowText = DEFAULT_MESSAGES[randomIndex];
    workerLog(`‚ö†Ô∏è Ph√°t hi·ªán n·ªôi dung kh√¥ng h·ª£p l·ªá "${piknowText}", ƒë√£ chuy·ªÉn sang n·ªôi dung m·∫∑c ƒë·ªãnh`, 'debug');
  }
  
  workerLog(`üîç N·ªôi dung PiKnow cu·ªëi c√πng: "${finalPiknowText.substring(0, 30)}${finalPiknowText.length > 30 ? '...' : ''}"`, 'debug');
  
  // Th·ª≠ l·∫°i nhi·ªÅu l·∫ßn
  while (retryCount <= MAX_RETRIES) {
    try {
      if (retryCount > 0) {
        const delayTime = 2000 * Math.pow(1.5, retryCount);
        workerLog(`üîÑ Th·ª≠ l·∫°i l·∫ßn ${retryCount}/${MAX_RETRIES} cho PiKnow b√†i ${knowId} sau ${delayTime/1000}s...`);
        await new Promise(resolve => setTimeout(resolve, delayTime));
      }
      
      // C·∫•u h√¨nh axios
      const config = {
        timeout: 20000, // TƒÉng th·ªùi gian ch·ªù l√™n 20 gi√¢y
        headers: {
          'User-Agent': getRandomUserAgent(),
          'Content-Type': 'application/x-www-form-urlencoded',
          'Accept': 'application/json, text/plain, */*',
          'Accept-Language': 'en-US,en;q=0.9,vi;q=0.8',
          'Origin': 'https://pivoice.app',
          'Referer': 'https://pivoice.app/'
        }
      };
      
      // Th√™m proxy n·∫øu c√≥
      if (proxy) {
        if (!proxy.host || !proxy.port) {
          workerLog(`‚ö†Ô∏è Proxy kh√¥ng h·ª£p l·ªá: thi·∫øu host ho·∫∑c port`, 'error');
        } else {
          try {
            // T·∫°o URL proxy
            const proxyAuth = proxy.name && proxy.password 
              ? `${proxy.name}:${proxy.password}@` 
              : '';
            const proxyUrl = `http://${proxyAuth}${proxy.host}:${proxy.port}`;
            
            // T·∫°o agent
            config.httpsAgent = new HttpsProxyAgent(proxyUrl);
            config.proxy = false; // T·∫Øt proxy m·∫∑c ƒë·ªãnh c·ªßa axios
            
            workerLog(`üîå S·ª≠ d·ª•ng proxy: ${proxy.host}:${proxy.port} cho user ${piknowUser.piname}`);
          } catch (proxyError) {
            workerLog(`‚ö†Ô∏è L·ªói c·∫•u h√¨nh proxy: ${proxyError.message}`, 'error');
            // Ti·∫øp t·ª•c kh√¥ng c√≥ proxy n·∫øu c√≥ l·ªói
          }
        }
      } else {
        workerLog(`‚ö†Ô∏è Kh√¥ng c√≥ proxy cho PiKnow b√†i ${knowId}`, 'debug');
      }
      
      // T·∫°o payload
      const payload = qs.stringify({
        component: "know",
        action: "answer",
        message: finalPiknowText,
        user_name: piknowUser.piname,
        know_id: knowId,
        english_version: 0,
        selected_country: 1,
        selected_chain: 0
      });
      
      // Log th√¥ng tin request
      workerLog(`üì§ User ${piknowUser.piname} PiKnow b√†i ${knowId}: "${finalPiknowText.substring(0, 20)}..."`);
      
      // G·ª≠i request
      const response = await axios.post('https://pivoice.app/vapi', payload, config);
      
      // Ki·ªÉm tra response
      workerLog(`üì• Response status: ${response.status}`);
      
      // Ki·ªÉm tra k·∫øt qu·∫£ th√†nh c√¥ng
      if (response.data && (response.data.status === 1 || response.data.time)) {
        workerLog(`‚úÖ User ${piknowUser.piname} ƒë√£ PiKnow th√†nh c√¥ng b√†i ${knowId}`);
        return {
          success: true,
          userId: piknowUser.uid,
          knowId,
          message: "PiKnow th√†nh c√¥ng"
        };
      } else {
        // Ki·ªÉm tra c√°c lo·∫°i l·ªói t·ª´ API
        const errorMsg = response.data.message || JSON.stringify(response.data);
        workerLog(`‚ùå PiKnow b√†i ${knowId} kh√¥ng th√†nh c√¥ng: ${errorMsg}`, 'error');
        
        // X·ª≠ l√Ω c√°c l·ªói c·ª• th·ªÉ
        if (response.data.status === 0) {
          if (errorMsg.includes("limit") || 
              errorMsg.includes("frequency") || 
              errorMsg.includes("too many") ||
              errorMsg.includes("rate")) {
            
            // L·ªói li√™n quan rate limit
            workerLog(`‚è±Ô∏è G·∫∑p rate limit, ƒë·ª£i th√™m th·ªùi gian...`);
            retryCount++;
            lastError = new Error(errorMsg);
            
            // G·ª≠i th√¥ng b√°o v·ªÅ rate limit cho cluster manager
            if (parentPort) {
              parentPort.postMessage({ 
                type: 'rateLimit', 
                proxy: proxy ? { host: proxy.host, port: proxy.port } : null
              });
            }
            
            // ƒê·ª£i l√¢u h∆°n v·ªõi l·ªói rate limit
            const backoffTime = Math.min(15000, 5000 * Math.pow(2, retryCount - 1));
            await new Promise(resolve => setTimeout(resolve, backoffTime));
            continue;
          }
        }
        
        return {
          success: false,
          userId: piknowUser.uid,
          knowId,
          error: errorMsg
        };
      }
    } catch (error) {
      lastError = error;
      workerLog(`‚ùå L·ªói khi PiKnow b√†i ${knowId}: ${error.message}`, 'error');
      
      // X·ª≠ l√Ω l·ªói HTTP
      if (error.response) {
        const statusCode = error.response.status;
        workerLog(`üî¢ M√£ l·ªói HTTP: ${statusCode}`, 'error');
        
        if (error.response.data) {
          workerLog(`üìÑ Response data: ${JSON.stringify(error.response.data)}`, 'debug');
        }
        
        // X·ª≠ l√Ω l·ªói 429 (too many requests)
        if (statusCode === 429) {
          retryCount++;
          
          // G·ª≠i th√¥ng b√°o v·ªÅ rate limit cho cluster manager
          if (parentPort) {
            parentPort.postMessage({ 
              type: 'rateLimit', 
              proxy: proxy ? { host: proxy.host, port: proxy.port } : null
            });
          }
          
          if (retryCount <= MAX_RETRIES) {
            // ƒê·ª£i th·ªùi gian d√†i h∆°n ƒë·ªëi v·ªõi l·ªói 429
            const backoffTime = 8000 * Math.pow(2, retryCount - 1);
            workerLog(`‚è±Ô∏è G·∫∑p l·ªói 429, s·∫Ω ƒë·ª£i ${backoffTime/1000}s tr∆∞·ªõc khi th·ª≠ l·∫°i...`);
            await new Promise(resolve => setTimeout(resolve, backoffTime));
            continue;
          }
        }
        // C√°c l·ªói server kh√°c
        else if ([500, 502, 503, 504].includes(statusCode)) {
          retryCount++;
          
          if (retryCount <= MAX_RETRIES) {
            const delayTime = 3000 * retryCount;
            workerLog(`üîÑ L·ªói server ${statusCode}, th·ª≠ l·∫°i sau ${delayTime/1000}s...`);
            await new Promise(resolve => setTimeout(resolve, delayTime));
            continue;
          }
        }
        // L·ªói kh√¥ng t√¨m th·∫•y
        else if (statusCode === 404) {
          return {
            success: false,
            userId: piknowUser.uid,
            knowId,
            error: `Resource not found: ${error.message}`
          };
        }
        // L·ªói x√°c th·ª±c proxy
        else if (statusCode === 407) {
          // Th√¥ng b√°o v·ªÅ l·ªói proxy cho cluster manager
          if (parentPort && proxy) {
            parentPort.postMessage({ 
              type: 'proxyError', 
              proxy: { host: proxy.host, port: proxy.port },
              statusCode: 407
            });
          }
          
          return {
            success: false,
            userId: piknowUser.uid,
            knowId,
            error: `Proxy authentication failed (407)`,
            proxyHost: proxy?.host,
            proxyPort: proxy?.port
          };
        }
        // C√°c l·ªói kh√°c
        else {
          retryCount++;
          
          if (retryCount <= MAX_RETRIES) {
            await new Promise(resolve => setTimeout(resolve, 2000 * retryCount));
            continue;
          }
        }
      } 
      // L·ªói kh√¥ng c√≥ response
      else if (error.request) {
        workerLog(`üì∂ Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server`, 'error');
        retryCount++;
        
        if (retryCount <= MAX_RETRIES) {
          await new Promise(resolve => setTimeout(resolve, 2000 * retryCount));
          continue;
        }
      }
      // L·ªói k·∫øt n·ªëi
      else if (error.code === 'ECONNABORTED' || 
               error.code === 'ETIMEDOUT' || 
               error.code === 'ECONNREFUSED' || 
               error.code === 'ECONNRESET' ||
               error.message.includes('timeout') ||
               error.message.includes('abort')) {
        
        workerLog(`üîå L·ªói k·∫øt n·ªëi: ${error.code || error.message}`, 'error');
        
        // Th√¥ng b√°o v·ªÅ l·ªói proxy
        if (parentPort && proxy && (error.code === 'ECONNREFUSED' || error.code === 'ETIMEDOUT')) {
          parentPort.postMessage({ 
            type: 'proxyError', 
            proxy: { host: proxy.host, port: proxy.port },
            errorCode: error.code
          });
        }
        
        retryCount++;
        
        if (retryCount <= MAX_RETRIES) {
          const delayTime = 2000 * retryCount;
          await new Promise(resolve => setTimeout(resolve, delayTime));
          continue;
        }
      }
    }
  }
  
  // N·∫øu ƒë√£ th·ª≠ MAX_RETRIES l·∫ßn m√† v·∫´n th·∫•t b·∫°i
  return {
    success: false,
    userId: piknowUser.uid,
    knowId,
    error: lastError ? lastError.message : "ƒê√£ h·∫øt s·ªë l·∫ßn th·ª≠ l·∫°i"
  };
}

/**
 * L·∫•y User Agent ng·∫´u nhi√™n
 */
function getRandomUserAgent() {
  const userAgents = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Safari/605.1.15',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36 Edg/91.0.864.59',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:90.0) Gecko/20100101 Firefox/90.0',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36 Edg/92.0.902.67',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36'
  ];
  
  return userAgents[Math.floor(Math.random() * userAgents.length)];
} 