const path = require('path');
const ExcelReaderService = require('../models/excelSheed');
const apiClient = require('../api/apiClient');
const qs = require("qs");
const getUserPosts = require("../services/getPostUser");
const { cpus } = require('os');
const os = require('os');
const PostsCache = require('../services/PostsCache');
const ProxyManager = require('../services/ProxyManager');
const LikeDistributor = require('../services/LikeDistributor');
const BatchFetcher = require('../services/BatchFetcher');
const fs = require('fs');
const { sleep, formatDuration } = require('../utils/helpers');
const ClusterManager = require('../../cluster-manager');

/**
 * Ghi log v√†o file
 * @param {string} message - N·ªôi dung log
 */
function logToFile(message) {
  try {
    const logsDir = path.join(__dirname, '../logs');
    
    // T·∫°o th∆∞ m·ª•c logs n·∫øu ch∆∞a t·ªìn t·∫°i
    if (!fs.existsSync(logsDir)) {
      fs.mkdirSync(logsDir, { recursive: true });
    }
    
    const date = new Date();
    const dateStr = date.toISOString().split('T')[0];
    const timestamp = `[${date.toLocaleTimeString()}]`;
    
    const logFilePath = path.join(logsDir, `pi-automate-logs-${dateStr}.txt`);
    
    // Th√™m timestamp v√†o message
    const logMessage = `${timestamp} ${message}\n`;
    
    // Ghi log v√†o file
    fs.appendFileSync(logFilePath, logMessage, 'utf8');
  } catch (error) {
    console.error(`L·ªói khi ghi log: ${error.message}`);
  }
}

class TaskQueue {
  constructor(concurrencyLimit = 10000) {
    this.concurrencyLimit = concurrencyLimit;
    this.runningTasks = 0;
    this.queue = [];
    this.results = [];
    this.completedCount = 0;
    this.successCount = 0;
    this.failCount = 0;
    this.totalTasks = 0;
    this.userLastRequestTime = new Map();
    this.isProcessing = false;
    this.processInterval = null;
    this.gcInterval = null;
    this.likedPosts = new Map();
    this.userLikeCount = new Map();
    this.userReceivedCount = new Map();
    
    this.startProcessing();
    this.startGarbageCollection();
  }

  startProcessing() {
    if (this.processInterval) {
      clearInterval(this.processInterval);
    }
    this.processInterval = setInterval(() => {
      if (!this.isProcessing) {
        this.processQueue();
      }
    }, 100);
  }

  startGarbageCollection() {
    if (this.gcInterval) {
      clearInterval(this.gcInterval);
    }
    this.gcInterval = setInterval(() => {
      this.cleanupMemory();
    }, 300000);
  }

  cleanupMemory() {
    if (this.results.length > 1000) {
      this.results = this.results.slice(-1000);
    }
    
    const now = Date.now();
    for (const [userId, lastTime] of this.userLastRequestTime.entries()) {
      if (now - lastTime > 3600000) {
        this.userLastRequestTime.delete(userId);
      }
    }
  }

  async add(taskFn, userId, targetUserId) {
    return new Promise((resolve) => {
      this.queue.push({ taskFn, resolve, userId, targetUserId, addedTime: Date.now() });
      this.totalTasks++;
      
      if (!this.userLikeCount.has(userId)) {
        this.userLikeCount.set(userId, 0);
      }
      if (!this.userReceivedCount.has(targetUserId)) {
        this.userReceivedCount.set(targetUserId, 0);
      }
    });
  }

  async processQueue() {
    if (this.queue.length === 0 || this.runningTasks >= this.concurrencyLimit) {
      return;
    }

    this.isProcessing = true;
    
    try {
      const now = Date.now();
      
      const eligibleTasks = this.queue.filter(task => {
        const lastRequestTime = this.userLastRequestTime.get(task.userId) || 0;
        return (now - lastRequestTime) >= 2000;
      });

      if (eligibleTasks.length === 0) {
        return;
      }

      eligibleTasks.sort((a, b) => a.addedTime - b.addedTime);

      const taskIndex = this.queue.findIndex(t => t === eligibleTasks[0]);
      const { taskFn, resolve, userId, targetUserId } = this.queue.splice(taskIndex, 1)[0];

      this.runningTasks++;
      this.userLastRequestTime.set(userId, now);

      try {
        const result = await taskFn();
        this.completedCount++;
        if (result.success) {
          this.successCount++;
          
          this.userLikeCount.set(userId, (this.userLikeCount.get(userId) || 0) + 1);
          this.userReceivedCount.set(targetUserId, (this.userReceivedCount.get(targetUserId) || 0) + 1);
          
          if (result.targetUserId && result.postId) {
            if (!this.likedPosts.has(result.targetUserId)) {
              this.likedPosts.set(result.targetUserId, []);
            }
            this.likedPosts.get(result.targetUserId).push({
              postId: result.postId,
              likedBy: result.userId
            });
            
            logToFile(`‚úÖ User ${userId} ƒë√£ like th√†nh c√¥ng b√†i ${result.postId} c·ªßa user ${targetUserId}`);
          }
        } else {
          this.failCount++;
          logToFile(`‚ùå User ${userId} like th·∫•t b·∫°i b√†i ${result.postId || 'N/A'} c·ªßa user ${targetUserId} - L·ªói: ${result.error || 'Unknown error'}`);
        }
        this.results.push({ status: 'fulfilled', value: result });
        resolve(result);
      } catch (error) {
        this.completedCount++;
        this.failCount++;
        this.results.push({ status: 'rejected', reason: error.message });
        logToFile(`‚ùå Exception khi user ${userId} like b√†i c·ªßa user ${targetUserId}: ${error.message}`);
        resolve({ success: false, error: error.message });
      }
    } finally {
      this.runningTasks--;
      this.isProcessing = false;
    }
  }

  get stats() {
    return {
      total: this.totalTasks,
      completed: this.completedCount,
      success: this.successCount,
      failure: this.failCount,
      pending: this.totalTasks - this.completedCount,
      running: this.runningTasks,
      queued: this.queue.length,
      likedPosts: Object.fromEntries(this.likedPosts),
      userLikeCounts: Object.fromEntries(this.userLikeCount),
      userReceivedCounts: Object.fromEntries(this.userReceivedCount),
      memoryUsage: process.memoryUsage()
    };
  }

  destroy() {
    if (this.processInterval) {
      clearInterval(this.processInterval);
    }
    if (this.gcInterval) {
      clearInterval(this.gcInterval);
    }
    this.queue = [];
    this.results = [];
    this.userLastRequestTime.clear();
    this.likedPosts.clear();
    this.userLikeCount.clear();
    this.userReceivedCount.clear();
  }
}

function updateProgressStatus(queue, proxyManager) {
  const { total, completed, success, failure, running } = queue.stats;
  const percent = total > 0 ? Math.floor((completed / total) * 100) : 0;
  const bar = Array(20).fill('‚ñí').map((char, i) => i < Math.floor(percent / 5) ? '‚ñà' : '‚ñí').join('');
  
  const statusText = `\n-------- TR·∫†NG TH√ÅI TI·∫æN ƒê·ªò LIKE --------\n[${bar}] ${percent}% (${completed}/${total})\n‚úÖ Th√†nh c√¥ng: ${success} | ‚ùå Th·∫•t b·∫°i: ${failure} | ‚è≥ ƒêang x·ª≠ l√Ω: ${running}\nüßµ Lu·ªìng ƒëang ch·∫°y: ${running} | üîÑ T·ªëi ƒëa lu·ªìng: ${queue.concurrencyLimit}`;
  console.log(statusText);
  logToFile(statusText.replace(/\n/g, ' | '));
  
  if (proxyManager) {
    const proxyStats = proxyManager.getProxyStats();
    const proxyText = `\n-------- TH√îNG TIN PROXY --------\nüìä T·ªïng s·ªë proxy: ${proxyStats.total} (Ho·∫°t ƒë·ªông: ${proxyStats.active}, Kh√¥ng ho·∫°t ƒë·ªông: ${proxyStats.inactive})\nüîÑ Proxy t·ª´ Excel: ${proxyStats.fromExcel} | üîÑ Proxy xoay: ${proxyStats.fromRotating}`;
    console.log(proxyText);
    logToFile(proxyText.replace(/\n/g, ' | '));
  }
  
  console.log(`-----------------------------------------\n`);
}

function getRandomUsers(users, n) {
  const shuffled = [...users].sort(() => 0.5 - Math.random());
  return shuffled.slice(0, n);
}

// Kh·ªüi t·∫°o taskQueue ·ªü ph·∫°m vi c·∫•p cao ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p t·ª´ kh·∫Øp n∆°i
  let taskQueue = null;

// Th√™m v√†o tr∆∞·ªõc task queue
async function processLikesInParallel(userObjects, targetUserIds, postsCache, taskQueue, concurrencyLimit) {
  console.log(`\n>> B·∫Øt ƒë·∫ßu x·ª≠ l√Ω like song song v·ªõi ${concurrencyLimit} lu·ªìng ƒë·ªìng th·ªùi`);
  logToFile(`B·∫Øt ƒë·∫ßu x·ª≠ l√Ω like song song v·ªõi ${concurrencyLimit} lu·ªìng ƒë·ªìng th·ªùi`);
  
  // T·∫°o ph√©p ho√°n v·ªã v·ªõi thu·∫≠t to√°n v√≤ng tr√≤n ƒë∆°n gi·∫£n
  const likeAssignments = [];
  
  // ƒê·∫£m b·∫£o m·ªói user th·ª±c hi·ªán ƒë√∫ng 12 l∆∞·ª£t like (ho·∫∑c √≠t h∆°n n·∫øu kh√¥ng ƒë·ªß target)
  const targetLikesPerUser = 12;
  const totalLikeUsers = userObjects.length;
  const totalTargetUsers = targetUserIds.length;
  
  console.log(`>> T·∫°o ma tr·∫≠n ph√¢n ph·ªëi like cho ${totalLikeUsers} user, m·ªói user like ${targetLikesPerUser} l∆∞·ª£t`);
  
  // T·∫°o ma tr·∫≠n ph√¢n ph·ªëi like: m·ªói user like nh·ªØng user n√†o
  // S·ª≠ d·ª•ng ho√°n v·ªã v√≤ng tr√≤n: user i s·∫Ω like cho c√°c user (i+1, i+2, ..., i+12) % totalTargetUsers
  for (let i = 0; i < totalLikeUsers; i++) {
    const likeUser = userObjects[i];
    const userAssignments = [];
    
    // Ph√¢n ph·ªëi targetLikesPerUser l∆∞·ª£t like cho m·ªói user
    for (let offset = 1; offset <= targetLikesPerUser && offset <= totalTargetUsers; offset++) {
      // T√≠nh ch·ªâ s·ªë c·ªßa user nh·∫≠n like theo modulo
      const targetIndex = (i + offset) % totalTargetUsers;
      const targetId = targetUserIds[targetIndex];
      
      // Kh√¥ng like ch√≠nh m√¨nh
      if (likeUser.uid !== targetId) {
        // N·∫øu user c√≥ b√†i vi·∫øt ƒë·ªÉ like
        if (postsCache.hasPostsForUser(targetId)) {
          const postId = postsCache.getPost(targetId);
          if (postId) {
            userAssignments.push({ targetUserId: targetId, postId });
          }
        }
      }
    }
    
    // N·∫øu user c√≥ l∆∞·ª£t like ƒë√£ ƒë∆∞·ª£c ph√¢n ph·ªëi
    if (userAssignments.length > 0) {
      likeAssignments.push({
        likeUser,
        targets: userAssignments
      });
    }
  }
  
  console.log(`>> ƒê√£ ph√¢n ph·ªëi t·ªïng c·ªông ${likeAssignments.length} user th·ª±c hi·ªán like`);
  
  // ƒê·∫øm t·ªïng s·ªë l∆∞·ª£t like ƒë√£ ph√¢n ph·ªëi
  let totalLikeCount = 0;
  likeAssignments.forEach(assignment => {
    totalLikeCount += assignment.targets.length;
  });
  
  console.log(`>> T·ªïng s·ªë l∆∞·ª£t like c·∫ßn th·ª±c hi·ªán: ${totalLikeCount}`);
  logToFile(`ƒê√£ ph√¢n ph·ªëi ${totalLikeCount} l∆∞·ª£t like cho ${likeAssignments.length} user`);
  
  // Th·ª±c thi song song c√°c l∆∞·ª£t like v·ªõi Promise.all v√† c∆° ch·∫ø gi·ªõi h·∫°n concurrency
  const startTime = Date.now();
  const batchStartTimes = new Map();
  const batchResults = new Map();
  
  // B∆∞·ªõc 1: T·∫°o c√°c promise cho t·ª´ng user
  const userPromises = likeAssignments.map((assignment, index) => {
    return () => new Promise(async (resolve) => {
      const { likeUser, targets } = assignment;
      const userStartTime = Date.now();
      batchStartTimes.set(likeUser.uid, userStartTime);
      
      console.log(`>> [${index + 1}/${likeAssignments.length}] User ${likeUser.piname || likeUser.uid} b·∫Øt ƒë·∫ßu th·ª±c hi·ªán ${targets.length} l∆∞·ª£t like`);
      
      let successCount = 0;
      let failCount = 0;
      
      // Th·ª±c hi·ªán tu·∫ßn t·ª± c√°c l∆∞·ª£t like cho m·ªói user
      for (let i = 0; i < targets.length; i++) {
        const { targetUserId, postId } = targets[i];
        
        try {
          // Th√™m t√°c v·ª• v√†o queue v√† ƒë·ª£i k·∫øt qu·∫£
          const result = await taskQueue.add(
          async () => {
              console.log(`>> User ${likeUser.piname} like b√†i ${postId} c·ªßa user ${targetUserId} (${i+1}/${targets.length})`);
            
            const maxRetries = 3;
            let retryCount = 0;
            
            while (retryCount <= maxRetries) {
              try {
                if (retryCount > 0) {
                  console.log(`>> Th·ª≠ l·∫°i l·∫ßn ${retryCount}/${maxRetries} cho like b√†i ${postId}`);
                    await sleep(1000 * retryCount); // Gi·∫£m th·ªùi gian ch·ªù xu·ªëng 1s
                }

                const api = apiClient(likeUser, { 
                  useProxyManager: true, 
                    timeout: 10000, // Gi·∫£m timeout xu·ªëng 10s
                    retries: 1
                });
                
                const payload = qs.stringify({
                  component: "article",
                  action: "like",
                  aid: postId,
                  user_name: likeUser.piname,
                  english_version: 0,
                  selected_country: 1,
                  selected_chain: 0,
                });

                const response = await api.post('/vapi', payload);
                
                if (response.data && response.data.time) {
                    console.log(`‚úÖ User ${likeUser.piname} ƒë√£ like th√†nh c√¥ng b√†i ${postId} (${i+1}/${targets.length})`);
                  return { success: true, postId, userId: likeUser.uid, targetUserId };
                } else {
                  console.log(`‚ö†Ô∏è Like b√†i ${postId} kh√¥ng th√†nh c√¥ng:`, response.data);
                  return { success: false, postId, userId: likeUser.uid, targetUserId, error: JSON.stringify(response.data) };
                }
              } catch (error) {
                  console.error(`‚ùå L·ªói khi like b√†i ${postId}:`, error.message);
                
                if (error.response) {
                  console.error(`M√£ l·ªói: ${error.response.status}`);
                  
                  if ([404, 429, 500, 502, 503, 504].includes(error.response.status)) {
                    retryCount++;
                    if (retryCount <= maxRetries) {
                        const delayTime = error.response.status === 429 ? 5000 : 2000 * retryCount;
                      console.log(`>> [Task] S·∫Ω th·ª≠ l·∫°i sau ${delayTime/1000} gi√¢y...`);
                      await sleep(delayTime);
                      continue;
                    }
                  }
                }
                
                return { success: false, postId, userId: likeUser.uid, targetUserId, error: error.message };
              }
            }
            
            return { success: false, postId, userId: likeUser.uid, targetUserId, error: "ƒê√£ h·∫øt s·ªë l·∫ßn th·ª≠ l·∫°i" };
          },
          likeUser.uid,
          targetUserId
        );
          
          // ƒê·∫øm s·ªë l∆∞·ª£t th√†nh c√¥ng/th·∫•t b·∫°i
          if (result.success) {
            successCount++;
          } else {
            failCount++;
          }
          
        } catch (error) {
          console.error(`>> L·ªói khi th·ª±c hi·ªán like:`, error);
          failCount++;
        }
      }
      
      const userFinishTime = Date.now();
      const userDuration = formatDuration(userFinishTime - userStartTime);
      
      console.log(`>> User ${likeUser.piname} ƒë√£ ho√†n th√†nh: ${successCount} th√†nh c√¥ng, ${failCount} th·∫•t b·∫°i (${userDuration})`);
      logToFile(`User ${likeUser.piname} ho√†n th√†nh: ${successCount}/${targets.length} l∆∞·ª£t like (${userDuration})`);
      
      batchResults.set(likeUser.uid, {
        successCount,
        failCount,
        totalAssigned: targets.length,
        duration: userDuration
      });
      
      resolve({
        user: likeUser.uid,
        success: successCount,
        fail: failCount,
        total: targets.length,
        duration: userDuration
      });
    });
  });
  
  // B∆∞·ªõc 2: Th·ª±c thi song song v·ªõi gi·ªõi h·∫°n concurrency
  const results = await runWithConcurrencyLimit(userPromises, concurrencyLimit);
  
  const endTime = Date.now();
  const totalDuration = formatDuration(endTime - startTime);
  
  // Ph√¢n t√≠ch k·∫øt qu·∫£
  let totalSuccess = 0;
  let totalFail = 0;
  
  results.forEach(result => {
    totalSuccess += result.success;
    totalFail += result.fail;
  });
  
  console.log(`\n>> T·ªïng k·∫øt x·ª≠ l√Ω song song:`);
  console.log(`>> - T·ªïng s·ªë l∆∞·ª£t like th√†nh c√¥ng: ${totalSuccess}/${totalLikeCount}`);
  console.log(`>> - T·ªïng s·ªë l∆∞·ª£t like th·∫•t b·∫°i: ${totalFail}/${totalLikeCount}`);
  console.log(`>> - Th·ªùi gian x·ª≠ l√Ω: ${totalDuration}`);
  logToFile(`K·∫øt qu·∫£ x·ª≠ l√Ω song song: ${totalSuccess} th√†nh c√¥ng, ${totalFail} th·∫•t b·∫°i, th·ªùi gian: ${totalDuration}`);
  
  // T√¨m user nhanh nh·∫•t v√† ch·∫≠m nh·∫•t
  let fastestUser = null;
  let fastestTime = Number.MAX_SAFE_INTEGER;
  let slowestUser = null;
  let slowestTime = 0;
  
  for (const [userId, result] of batchResults.entries()) {
    const timeInMs = (new Date(batchStartTimes.get(userId) + result.duration)) - batchStartTimes.get(userId);
    if (timeInMs < fastestTime) {
      fastestTime = timeInMs;
      fastestUser = userId;
    }
    if (timeInMs > slowestTime) {
      slowestTime = timeInMs;
      slowestUser = userId;
    }
  }
  
  if (fastestUser) {
    const fastestUserObj = userObjects.find(u => u.uid === fastestUser);
    console.log(`>> User nhanh nh·∫•t: ${fastestUserObj?.piname || fastestUser} (${formatDuration(fastestTime)})`);
  }
  
  if (slowestUser) {
    const slowestUserObj = userObjects.find(u => u.uid === slowestUser);
    console.log(`>> User ch·∫≠m nh·∫•t: ${slowestUserObj?.piname || slowestUser} (${formatDuration(slowestTime)})`);
  }
  
  return {
    totalAssigned: totalLikeCount,
    successCount: totalSuccess,
    failCount: totalFail,
    duration: totalDuration
  };
}

/**
 * H√†m th·ª±c thi c√°c promise v·ªõi gi·ªõi h·∫°n concurrency
 * @param {Array<Function>} promiseFns - M·∫£ng c√°c h√†m tr·∫£ v·ªÅ promise
 * @param {number} concurrency - S·ªë l∆∞·ª£ng promise th·ª±c thi ƒë·ªìng th·ªùi t·ªëi ƒëa
 * @returns {Array} - K·∫øt qu·∫£ c·ªßa t·∫•t c·∫£ c√°c promise
 */
async function runWithConcurrencyLimit(promiseFns, concurrency) {
  const results = [];
  const executing = new Set();
  
  async function executePromise(promiseFn) {
    const p = promiseFn();
    executing.add(p);
    
    try {
      const res = await p;
      results.push(res);
    } catch (err) {
      results.push({ error: err });
    } finally {
      executing.delete(p);
    }
  }
  
  // Th·ª±c thi promise v·ªõi s·ªë l∆∞·ª£ng gi·ªõi h·∫°n
  for (const promiseFn of promiseFns) {
    if (executing.size >= concurrency) {
      // N·∫øu ƒë√£ ƒë·∫°t gi·ªõi h·∫°n, ƒë·ª£i m·ªôt promise ho√†n th√†nh
      await Promise.race(executing);
    }
    
    // Th·ª±c thi promise ti·∫øp theo
    executePromise(promiseFn);
  }
  
  // ƒê·ª£i t·∫•t c·∫£ c√°c promise ƒëang th·ª±c thi ho√†n th√†nh
  await Promise.all(executing);
  
  return results;
}

async function processLikesWithCluster(userObjects, targetUserIds, postsCache, proxyManager, options = {}) {
  console.log(`\n>> B·∫Øt ƒë·∫ßu x·ª≠ l√Ω like v·ªõi ClusterManager`);
  logToFile(`B·∫Øt ƒë·∫ßu x·ª≠ l√Ω like v·ªõi ClusterManager`);
  
  const startTime = Date.now();
  const debug = !!options.debug;
  
  if (debug) {
    console.log(`>> [DEBUG] userObjects: ${userObjects.length}, targetUserIds: ${targetUserIds.length}`);
    console.log(`>> [DEBUG] ProxyManager stats:`, proxyManager.getProxyStats());
  }
  
  // T·∫°o ph√©p ho√°n v·ªã v·ªõi thu·∫≠t to√°n v√≤ng tr√≤n ƒë∆°n gi·∫£n
  const likeAssignments = [];
  
  // ƒê·∫£m b·∫£o m·ªói user th·ª±c hi·ªán ƒë√∫ng 12 l∆∞·ª£t like (ho·∫∑c √≠t h∆°n n·∫øu kh√¥ng ƒë·ªß target)
  const targetLikesPerUser = 12;
  const totalLikeUsers = userObjects.length;
  const totalTargetUsers = targetUserIds.length;
  
  console.log(`>> T·∫°o ma tr·∫≠n ph√¢n ph·ªëi like cho ${totalLikeUsers} user, m·ªói user like ${targetLikesPerUser} l∆∞·ª£t`);
  
  // S·ªë l∆∞·ª£ng t√°c v·ª• ƒë·ªìng th·ªùi tr√™n m·ªói CPU/worker
  const concurrentTasksPerWorker = options.concurrentTasksPerWorker || 10;
  
  // S·ªë l∆∞·ª£ng CPU s·ª≠ d·ª•ng
  const numWorkers = options.numWorkers || os.cpus().length;
  
  if (debug) {
    console.log(`>> [DEBUG] Tham s·ªë x·ª≠ l√Ω:`);
    console.log(`>> [DEBUG] - CPUs: ${numWorkers}`);
    console.log(`>> [DEBUG] - Tasks per CPU: ${concurrentTasksPerWorker}`);
    console.log(`>> [DEBUG] - Total max concurrent tasks: ${numWorkers * concurrentTasksPerWorker}`);
  }
  
  // T·∫°o tasks ƒë·ªÉ ph√¢n ph·ªëi cho ClusterManager
  const tasks = [];
  const usersWithProxyCount = userObjects.filter(u => u.proxy).length;
  
  if (usersWithProxyCount < userObjects.length) {
    console.warn(`>> C·∫¢NH B√ÅO: Ch·ªâ c√≥ ${usersWithProxyCount}/${userObjects.length} user c√≥ proxy ƒë∆∞·ª£c g√°n!`);
    if (debug) {
      // Li·ªát k√™ 5 user ƒë·∫ßu ti√™n kh√¥ng c√≥ proxy
      const usersWithoutProxy = userObjects.filter(u => !u.proxy).slice(0, 5);
      console.log(`>> [DEBUG] Users kh√¥ng c√≥ proxy (5 ƒë·∫ßu ti√™n):`);
      usersWithoutProxy.forEach(u => console.log(`>> [DEBUG] - User ${u.uid}`));
    }
  }
  
  // T·∫°o ma tr·∫≠n ph√¢n ph·ªëi like: m·ªói user like nh·ªØng user n√†o
  // S·ª≠ d·ª•ng ho√°n v·ªã v√≤ng tr√≤n: user i s·∫Ω like cho c√°c user (i+1, i+2, ..., i+12) % totalTargetUsers
  for (let i = 0; i < totalLikeUsers; i++) {
    const likeUser = userObjects[i];
    const userTasks = [];
    
    // Ki·ªÉm tra v√† ghi log n·∫øu user kh√¥ng c√≥ proxy
    if (!likeUser.proxy && debug) {
      console.warn(`>> [DEBUG] User ${likeUser.uid} kh√¥ng c√≥ proxy!`);
    }
    
    // Ph√¢n ph·ªëi targetLikesPerUser l∆∞·ª£t like cho m·ªói user
    for (let offset = 1; offset <= targetLikesPerUser && offset <= totalTargetUsers; offset++) {
      // T√≠nh ch·ªâ s·ªë c·ªßa user nh·∫≠n like theo modulo
      const targetIndex = (i + offset) % totalTargetUsers;
      const targetId = targetUserIds[targetIndex];
      
      // Kh√¥ng like ch√≠nh m√¨nh
      if (likeUser.uid !== targetId) {
        // N·∫øu user c√≥ b√†i vi·∫øt ƒë·ªÉ like
        if (postsCache.hasPostsForUser(targetId)) {
          const postId = postsCache.getPost(targetId);
          if (postId) {
            userTasks.push({
              likeUser,
              targetUserId: targetId,
              postId
            });
          }
        }
      }
    }
    
    // Th√™m t·∫•t c·∫£ tasks c·ªßa user n√†y v√†o danh s√°ch tasks chung
    tasks.push(...userTasks);
  }
  
  console.log(`>> ƒê√£ t·∫°o ${tasks.length} t√°c v·ª• like t·ª´ ${totalLikeUsers} user`);
  
  if (tasks.length === 0) {
    console.error(`>> Kh√¥ng c√≥ t√°c v·ª• like n√†o ƒë∆∞·ª£c t·∫°o! Vui l√≤ng ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o.`);
    return {
      totalAssigned: 0,
      successCount: 0,
      failCount: 0,
      duration: formatDuration(Date.now() - startTime),
      results: []
    };
  }
  
  // Kh·ªüi t·∫°o ClusterManager 
  console.log(`>> Kh·ªüi t·∫°o ClusterManager v·ªõi ${numWorkers} workers v√† ${concurrentTasksPerWorker} tasks/worker...`);
  
  const clusterManager = new ClusterManager({
    numWorkers,
    concurrentTasksPerWorker,
    proxyManager // ƒê·∫£m b·∫£o truy·ªÅn proxyManager v√†o ƒë√¢y
  });
  
  try {
    // Th·ª±c thi t·∫•t c·∫£ c√°c tasks
    console.log(`>> B·∫Øt ƒë·∫ßu th·ª±c thi ${tasks.length} t√°c v·ª• like v·ªõi ClusterManager...`);
    logToFile(`B·∫Øt ƒë·∫ßu th·ª±c thi ${tasks.length} t√°c v·ª• like v·ªõi ClusterManager...`);
    
    // Th·ª±c thi tasks v√† l·∫•y k·∫øt qu·∫£
    const results = await clusterManager.executeTasks(tasks);
    
    // T√≠nh to√°n th·ªëng k√™
    const endTime = Date.now();
    const totalDuration = formatDuration(endTime - startTime);
    
    // S·ªë l∆∞·ª£ng th√†nh c√¥ng v√† th·∫•t b·∫°i
    const totalSuccess = results.filter(result => result.success).length;
    const totalFail = results.length - totalSuccess;
    
    console.log(`\n>> T·ªïng k·∫øt x·ª≠ l√Ω v·ªõi ClusterManager:`);
    console.log(`>> - T·ªïng s·ªë l∆∞·ª£t like th√†nh c√¥ng: ${totalSuccess}/${tasks.length}`);
    console.log(`>> - T·ªïng s·ªë l∆∞·ª£t like th·∫•t b·∫°i: ${totalFail}/${tasks.length}`);
    console.log(`>> - Th·ªùi gian x·ª≠ l√Ω: ${totalDuration}`);
    logToFile(`K·∫øt qu·∫£ x·ª≠ l√Ω v·ªõi ClusterManager: ${totalSuccess} th√†nh c√¥ng, ${totalFail} th·∫•t b·∫°i, th·ªùi gian: ${totalDuration}`);
    
    // Ph√¢n t√≠ch l·ªói n·∫øu c√≥ v√† trong ch·∫ø ƒë·ªô debug
    if (totalFail > 0 && debug) {
      const failedResults = results.filter(result => !result.success);
      const errorCounts = {};
      
      failedResults.forEach(result => {
        const errorType = result.error || 'Unknown error';
        errorCounts[errorType] = (errorCounts[errorType] || 0) + 1;
      });
      
      console.log(`\n>> [DEBUG] Ph√¢n t√≠ch l·ªói:`);
      Object.entries(errorCounts)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 5)
        .forEach(([error, count]) => {
          console.log(`>> [DEBUG] - ${error}: ${count} l·∫ßn`);
        });
    }
    
    return {
      totalAssigned: tasks.length,
      successCount: totalSuccess,
      failCount: totalFail,
      duration: totalDuration,
      results
    };
    
  } finally {
    // D·ªçn d·∫πp t√†i nguy√™n
    clusterManager.cleanup();
  }
}

async function handleLikeEachOther(req) {
  // Kh·ªüi t·∫°o c√°c d·ªãch v·ª•
  const proxyManager = new ProxyManager();
  const postsCache = new PostsCache();
  const startTime = Date.now();
  
  logToFile(`======= B·∫ÆT ƒê·∫¶U TI·∫æN TR√åNH LIKE CH√âO =======`);
  logToFile(`Phi√™n b·∫£n: v4.0 (C·∫£i ti·∫øn t·ªëc ƒë·ªô v·ªõi thu·∫≠t to√°n ho√°n v·ªã v√≤ng tr√≤n v√† x·ª≠ l√Ω song song)`);
  
  try {
    // Kh·ªüi t·∫°o ProxyManager v√† thi·∫øt l·∫≠p cho apiClient
    logToFile(`Kh·ªüi t·∫°o ProxyManager...`);
    await proxyManager.initialize();
    apiClient.setGlobalProxyManager(proxyManager);
    
    // C·∫•u h√¨nh c·ªë ƒë·ªãnh cho 2.000 t√†i kho·∫£n
    const FIXED_CONFIG = {
      userCount: 2000,           // S·ªë l∆∞·ª£ng t√†i kho·∫£n x·ª≠ l√Ω
      useExcelUsers: true,
      excelPath: '',
      targetCount: 2000,
      onlyActive: true,
      numCpus: 8,                // S·ªë CPU s·ª≠ d·ª•ng
      tasksPerCpu: 6,            // T√°c v·ª• ƒë·ªìng th·ªùi m·ªói CPU
      concurrencyLimit: 48,      // T·ªïng s·ªë lu·ªìng ƒë·ªìng th·ªùi
      masterBatchSize: 200,      // S·ªë t√†i kho·∫£n trong m·ªói l√¥ l·ªõn
      subBatchSize: 12,          // S·ªë l∆∞·ª£t like m·ªói t√†i kho·∫£n th·ª±c hi·ªán
      parallelBatches: 10,       // S·ªë l√¥ nh·ªè ch·∫°y song song
      debug: true
    };
    
    // S·ª≠ d·ª•ng c·∫•u h√¨nh c·ªë ƒë·ªãnh, b·ªè qua th√¥ng s·ªë ƒë·∫ßu v√†o
    // Ch·ªâ l·∫•y excelPath t·ª´ tham s·ªë ƒë·∫ßu v√†o n·∫øu c√≥
    let requestConfig = FIXED_CONFIG;
    
    // N·∫øu req l√† m·ªôt s·ªë, nghƒ©a l√† ƒë∆∞·ª£c g·ªçi t·ª´ main.js
    if (typeof req === 'number') {
      logToFile(`ƒê∆∞·ª£c g·ªçi t·ª´ giao di·ªán v·ªõi ${req} t√†i kho·∫£n, √°p d·ª•ng c·∫•u h√¨nh c·ªë ƒë·ªãnh cho 2.000 t√†i kho·∫£n`);
    } 
    // N·∫øu req l√† object c√≥ ch·ª©a body (t·ª´ API)
    else if (req && req.body) {
      // Ch·ªâ l·∫•y ƒë∆∞·ªùng d·∫´n file Excel n·∫øu c√≥
      if (req.body.excelPath) {
        requestConfig.excelPath = req.body.excelPath;
      }
      logToFile(`ƒê∆∞·ª£c g·ªçi t·ª´ API, √°p d·ª•ng c·∫•u h√¨nh c·ªë ƒë·ªãnh cho 2.000 t√†i kho·∫£n`);
    }
    
    // Th√¥ng s·ªë batch t·ª´ c·∫•u h√¨nh c·ªë ƒë·ªãnh
    const MASTER_BATCH_SIZE = requestConfig.masterBatchSize;
    const SUB_BATCH_SIZE = requestConfig.subBatchSize;
    const PARALLEL_BATCHES = requestConfig.parallelBatches;
    
    console.log(`>> TH√îNG S·ªê BATCH C·ªê ƒê·ªäNH CHO 2.000 T√ÄI KHO·∫¢N:`);
    console.log(`>> - Master batch size: ${MASTER_BATCH_SIZE} users/batch`);
    console.log(`>> - Sub-batch size: ${SUB_BATCH_SIZE} users/sub-batch`);
    console.log(`>> - S·ªë l∆∞·ª£ng batch song song: ${PARALLEL_BATCHES}`);
    console.log(`>> - S·ªë lu·ªìng ƒë·ªìng th·ªùi t·ªëi ƒëa: ${requestConfig.concurrencyLimit}`);
    
    logToFile(`Th√¥ng s·ªë batch: Master=${MASTER_BATCH_SIZE}, Sub=${SUB_BATCH_SIZE}, Song song=${PARALLEL_BATCHES}, Lu·ªìng=${requestConfig.concurrencyLimit}`);
    
    // Step 1: ƒê·ªçc danh s√°ch user t·ª´ Excel
    console.log(`\n>> STEP 1: ƒê·ªçc danh s√°ch user t·ª´ Excel...`);
    
    // ƒê∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi ƒë·∫øn file Excel
    const dataDir = path.join(__dirname, '../data');
    // S·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n excelPath n·∫øu c√≥, ng∆∞·ª£c l·∫°i t√¨m file Excel trong th∆∞ m·ª•c data
    const excelFilePath = requestConfig.excelPath || path.join(dataDir, 'PI.xlsx');
    
    console.log(`>> ƒê·ªçc danh s√°ch user t·ª´ file: ${excelFilePath}`);
    
    // T·∫°o ƒë·ªëi t∆∞·ª£ng ExcelReaderService v·ªõi ƒë∆∞·ªùng d·∫´n file
    const excelReader = new ExcelReaderService(excelFilePath);
    
    // ƒê·ªçc t·∫•t c·∫£ d·ªØ li·ªáu t·ª´ file Excel
    const excelData = excelReader.readAllSheets();
    
    // D·ª±a v√†o c·∫•u tr√∫c c≈©, l·∫•y d·ªØ li·ªáu t·ª´ c√°c c·ªôt c·∫ßn thi·∫øt
    const uid = excelData["prxageng"]?.["uid"] || [];
    const piname = excelData["prxageng"]?.["piname"] || [];
    const ukey = excelData["prxageng"]?.["ukey"] || [];
    const proxy = excelData["prxageng"]?.["proxy"] || [];
    
    // T·∫°o danh s√°ch user t·ª´ d·ªØ li·ªáu Excel 
    const users = [];
    for (let i = 0; i < uid.length; i++) {
      if (uid[i] && ukey[i] && piname[i]) {
        const proxyInfo = proxy[i] ? proxy[i].split(':') : null;
        
        users.push({
          uid: uid[i],
          ukey: ukey[i],
          piname: piname[i],
          active: true, // Gi·∫£ ƒë·ªãnh t·∫•t c·∫£ user ƒë·ªÅu active
          proxy: proxyInfo ? {
            host: proxyInfo[0],
            port: proxyInfo[1],
            name: proxyInfo[2],
            password: proxyInfo[3]
          } : null
        });
      }
    }
    
    logToFile(`STEP 1: ƒê·ªçc ƒë∆∞·ª£c ${users.length} user t·ª´ Excel`);
    
    // N·∫øu kh√¥ng c√≥ user, k·∫øt th√∫c s·ªõm
    if (users.length === 0) {
      logToFile(`L·ªói: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu user t·ª´ Excel`);
      return {
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu user t·ª´ file Excel",
      };
    }
    
    // Th√™m proxy t·ª´ Excel v√†o pool n·∫øu c√≥
    const excelProxies = users
      .filter(user => user.proxy)
      .map(user => user.proxy);
    
    if (excelProxies.length > 0) {
      console.log(`>> Th√™m ${excelProxies.length} proxy t·ª´ Excel v√†o pool`);
      proxyManager.addExcelProxies(excelProxies);
    }
    
    // Step 2: L·ªçc user theo c√°c ti√™u ch√≠
    console.log(`\n>> STEP 2: L·ªçc danh s√°ch user...`);
    
    // L·ªçc user c√≥ ƒë·ªß th√¥ng tin ƒë·ªÉ ƒëƒÉng nh·∫≠p
    const validUsers = users.filter(user => user.uid && user.ukey && user.piname);
    
    // L·ªçc ti·∫øp theo c√°c ti√™u ch√≠ kh√°c n·∫øu c√≥ (v√≠ d·ª•: onlyActive)
    let filteredUsers = validUsers;
    if (requestConfig.onlyActive) {
      filteredUsers = validUsers.filter(user => user.active !== "0" && user.active !== false);
    }
    
    console.log(`>> L·ªçc ƒë∆∞·ª£c ${filteredUsers.length}/${users.length} user h·ª£p l·ªá`);
    logToFile(`STEP 2: L·ªçc ƒë∆∞·ª£c ${filteredUsers.length}/${users.length} user h·ª£p l·ªá`);
    
    // Step 3: Ch·ªçn s·ªë l∆∞·ª£ng user theo y√™u c·∫ßu
    console.log(`\n>> STEP 3: Ch·ªçn ${requestConfig.userCount} user ƒë·ªÉ th·ª±c hi·ªán like...`);
    // L·∫•y ng·∫´u nhi√™n userCount user ƒë·ªÉ th·ª±c hi·ªán like
    const selectedUsers = filteredUsers.length > requestConfig.userCount ? 
      getRandomUsers(filteredUsers, requestConfig.userCount) : filteredUsers;
    
    console.log(`>> ƒê√£ ch·ªçn ${selectedUsers.length} user ƒë·ªÉ th·ª±c hi·ªán like`);
    logToFile(`STEP 3: ƒê√£ ch·ªçn ${selectedUsers.length} user ƒë·ªÉ th·ª±c hi·ªán like`);
    
    // Step 4: Ch·ªçn user ƒë·ªÉ like (target)
    console.log(`\n>> STEP 4: Ch·ªçn ${requestConfig.targetCount} user ƒë·ªÉ ƒë∆∞·ª£c like...`);
    
    // L·∫•y uid c·ªßa t·∫•t c·∫£ user ƒë√£ l·ªçc ƒë·ªÉ l√†m ƒë·ªëi t∆∞·ª£ng ƒë∆∞·ª£c like
    const allUserIds = filteredUsers.map(user => user.uid);
    
    // L·∫•y ng·∫´u nhi√™n targetCount user ƒë·ªÉ nh·∫≠n like
    let targetUserIds = allUserIds.length > requestConfig.targetCount ? 
      getRandomUsers(allUserIds, requestConfig.targetCount) : allUserIds;
    
    console.log(`>> ƒê√£ ch·ªçn ${targetUserIds.length} user ƒë·ªÉ ƒë∆∞·ª£c like`);
    logToFile(`STEP 4: ƒê√£ ch·ªçn ${targetUserIds.length} user ƒë·ªÉ ƒë∆∞·ª£c like`);
    
    // Step 5: T·∫°o ƒë·ªëi t∆∞·ª£ng chi ti·∫øt cho user
    console.log(`\n>> STEP 5: Chu·∫©n b·ªã th√¥ng tin chi ti·∫øt c·ªßa user...`);
    
    // Map user objects cho t·∫•t c·∫£ user (ƒë·ªÉ sau n√†y d·ªÖ t√¨m)
    const userMap = new Map();
    for (const user of users) {
      if (user.uid) {
        userMap.set(user.uid, user);
      }
    }
    
    // L·∫•y th√¥ng tin chi ti·∫øt cho c√°c user ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ th·ª±c hi·ªán like
    const userObjects = selectedUsers.map(user => ({
      uid: user.uid,
      ukey: user.ukey,
      piname: user.piname,
      proxy: user.proxy || null
    }));
    
    // L·∫•y th√¥ng tin chi ti·∫øt cho c√°c user ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ nh·∫≠n like
    const targetUserObjects = targetUserIds.map(uid => {
      const fullUser = userMap.get(uid);
      if (fullUser) {
        return {
          uid: fullUser.uid,
          ukey: fullUser.ukey,
          piname: fullUser.piname,
          proxy: fullUser.proxy || null
        };
      }
      return { uid };
    });
    
    console.log(`>> ƒê√£ chu·∫©n b·ªã th√¥ng tin cho ${userObjects.length} user th·ª±c hi·ªán like`);
    console.log(`>> ƒê√£ chu·∫©n b·ªã th√¥ng tin cho ${targetUserObjects.length} user ƒë∆∞·ª£c like`);
    logToFile(`STEP 5: Chu·∫©n b·ªã th√¥ng tin cho ${userObjects.length} user th·ª±c hi·ªán like v√† ${targetUserObjects.length} user ƒë∆∞·ª£c like`);
    
    // Step 6: L·∫•y b√†i vi·∫øt c·ªßa t·∫•t c·∫£ user ƒë·ªÉ l√†m d·ªØ li·ªáu like
    console.log(`\n>> STEP 6: L·∫•y b√†i vi·∫øt c·ªßa c√°c user...`);
    logToFile(`STEP 6: B·∫Øt ƒë·∫ßu l·∫•y b√†i vi·∫øt c·ªßa ${targetUserObjects.length} users`);
    
    // S·ª≠ d·ª•ng BatchFetcher ƒë·ªÉ l·∫•y b√†i vi·∫øt hi·ªáu qu·∫£
    const batchFetcher = new BatchFetcher(postsCache, proxyManager);
    
    // L·∫•y b√†i vi·∫øt c·ªßa t·∫•t c·∫£ target user
    await batchFetcher.fetchAllPostsInBatches(targetUserObjects);
    
    // Ki·ªÉm tra k·∫øt qu·∫£
    const postsStatus = batchFetcher.checkPostsAvailability(targetUserIds);
    console.log(`\n>> K·∫øt qu·∫£ l·∫•y b√†i vi·∫øt: ${postsStatus.available}/${postsStatus.total} user c√≥ b√†i vi·∫øt`);
    logToFile(`K·∫øt qu·∫£ l·∫•y b√†i vi·∫øt: ${postsStatus.available}/${postsStatus.total} user c√≥ b√†i vi·∫øt`);
    
    // Th·ª≠ l·∫•y l·∫°i b√†i vi·∫øt cho c√°c user ch∆∞a c√≥
    if (postsStatus.missing > 0) {
      console.log(`\n>> Th·ª≠ l·∫•y l·∫°i b√†i vi·∫øt cho ${postsStatus.missing} user...`);
      logToFile(`Th·ª≠ l·∫•y l·∫°i b√†i vi·∫øt cho ${postsStatus.missing} user...`);
      
      await batchFetcher.retryMissingPosts(postsStatus.usersWithoutPosts, targetUserObjects);
      
      // Ki·ªÉm tra l·∫°i k·∫øt qu·∫£
      const finalPostsStatus = batchFetcher.checkPostsAvailability(targetUserIds);
      console.log(`\n>> K·∫øt qu·∫£ cu·ªëi c√πng: ${finalPostsStatus.available}/${finalPostsStatus.total} user c√≥ b√†i vi·∫øt`);
      logToFile(`K·∫øt qu·∫£ cu·ªëi c√πng: ${finalPostsStatus.available}/${finalPostsStatus.total} user c√≥ b√†i vi·∫øt`);
      
      // C·∫≠p nh·∫≠t l·∫°i danh s√°ch targetUserIds ch·ªâ gi·ªØ c√°c user c√≥ b√†i vi·∫øt
      targetUserIds = finalPostsStatus.usersWithPosts;
    }
    
    // STEP 6.5: Thi·∫øt l·∫≠p proxy cho c√°c user
    console.log(`\n>> STEP 6.5: Thi·∫øt l·∫≠p proxy cho c√°c user...`);
    logToFile(`STEP 6.5: Thi·∫øt l·∫≠p proxy cho c√°c user...`);
    
    // G√°n proxy cho t·ª´ng user ƒë·ªÉ ƒë·∫£m b·∫£o m·ªói user ƒë·ªÅu c√≥ proxy
    const userAssignments = proxyManager.assignProxiesToUsers(userObjects);
    
    // C·∫≠p nh·∫≠t th√¥ng tin proxy cho c√°c user
    userAssignments.forEach(assignment => {
      const userIndex = userObjects.findIndex(u => u.uid === assignment.user.uid);
      if (userIndex !== -1) {
        userObjects[userIndex].proxy = assignment.proxy;
      }
    });
    
    console.log(`>> ƒê√£ g√°n proxy cho ${userAssignments.length}/${userObjects.length} user`);
    logToFile(`ƒê√£ g√°n proxy cho ${userAssignments.length}/${userObjects.length} user`);
    
    // Hi·ªÉn th·ªã th·ªëng k√™ proxy
    const proxyStats = proxyManager.getProxyStats();
    console.log(`>> Th·ªëng k√™ proxy: ${proxyStats.active}/${proxyStats.total} proxy ho·∫°t ƒë·ªông, ${proxyStats.fromExcel} t·ª´ Excel, ${proxyStats.fromRotating} t·ª´ rotating`);
    
    // Thay th·∫ø Step 7 c≈© v·ªõi ph·∫ßn x·ª≠ l√Ω hi·ªáu qu·∫£ h∆°n s·ª≠ d·ª•ng ClusterManager
    console.log(`\n>> STEP 7: Ph√¢n ph·ªëi v√† th·ª±c hi·ªán like song song v·ªõi Cluster...`);
    logToFile(`STEP 7: B·∫Øt ƒë·∫ßu ph√¢n ph·ªëi v√† th·ª±c hi·ªán like song song v·ªõi Cluster...`);
    
    // X·ª≠ l√Ω like v·ªõi ClusterManager
    const clusterResult = await processLikesWithCluster(
      userObjects, 
      targetUserIds, 
      postsCache, 
      proxyManager, 
      {
        numWorkers: requestConfig.numCpus,
        concurrentTasksPerWorker: requestConfig.tasksPerCpu,
        debug: requestConfig.debug
      }
    );
    
    console.log(`\n>> K·∫øt qu·∫£ cu·ªëi c√πng: ${clusterResult.successCount} l∆∞·ª£t like th√†nh c√¥ng, ${clusterResult.failCount} l∆∞·ª£t th·∫•t b·∫°i`);
    console.log(`>> Th·ªùi gian ch·∫°y: ${clusterResult.duration}`);
    
    logToFile(`====== K·∫æT QU·∫¢ CU·ªêI C√ôNG ======`);
    logToFile(`Th√†nh c√¥ng: ${clusterResult.successCount} l∆∞·ª£t like | Th·∫•t b·∫°i: ${clusterResult.failCount} l∆∞·ª£t like`);
    logToFile(`Th·ªùi gian ch·∫°y: ${clusterResult.duration}`);
    logToFile(`======= K·∫æT TH√öC TI·∫æN TR√åNH LIKE CH√âO =======`);

    return { 
      success: clusterResult.successCount > 0,
      message: `ƒê√£ like ${clusterResult.successCount}/${clusterResult.totalAssigned} l∆∞·ª£t th√†nh c√¥ng!`,
      stats: {
        total: clusterResult.totalAssigned,
        success: clusterResult.successCount,
        failure: clusterResult.failCount,
        runtime: clusterResult.duration
      }
    };
  } catch (error) {
    console.error(`‚ùå L·ªói kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c: ${error.message}`);
    console.error(error.stack);
    
    logToFile(`====== L·ªñI NGHI√äM TR·ªåNG ======`);
    logToFile(`L·ªói: ${error.message}`);
    logToFile(`Stack: ${error.stack}`);
    logToFile(`======= K·∫æT TH√öC TI·∫æN TR√åNH LIKE CH√âO (L·ªñI) =======`);
    
    return {
      success: false,
      message: `ƒê√£ x·∫£y ra l·ªói khi likeEachOther: ${error.message}`,
      error: error.toString(),
      stack: error.stack
    };
  } finally {
    // D·ªçn d·∫πp t√†i nguy√™n
    if (taskQueue) {
      taskQueue.destroy();
    }
    
    proxyManager.stop();
    console.log('>> ƒê√£ d·ª´ng t·∫•t c·∫£ services');
    logToFile('ƒê√£ d·ª´ng t·∫•t c·∫£ services');
  }
}

module.exports = handleLikeEachOther;
