const apiClient = require("../api/apiClient");
const qs = require("qs");

/**
 * L·∫•y danh s√°ch b√†i PiKnow c·ªßa m·ªôt user
 * @param {Object} user - Th√¥ng tin ng∆∞·ªùi d√πng
 * @param {Object} options - C√°c t√πy ch·ªçn b·ªï sung
 * @returns {Promise<Array<string>>} - Danh s√°ch ID b√†i PiKnow
 */
async function getAllPostPiKnow(user, options = {}) {
  const retry = options.retry || 0;
  const maxRetries = options.maxRetries || 3;
  const proxyManager = options.proxyManager || null;
  const delayBetweenRetries = options.delayBetweenRetries || 3000;

  try {
    console.log(`>> ƒêang l·∫•y article ID t·ª´ trang ch·ªß PiKnow cho user ${user.piname}`);

    // Log th√¥ng tin user ƒë·ªÉ debug
    console.log(`>> Th√¥ng tin user: ${user.piname}, UID: ${user.uid}`);
    
    // T·∫°o client API v·ªõi th√¥ng tin ng∆∞·ªùi d√πng
    const apiOptions = {
      useProxyManager: true,
      timeout: 10000,
      retries: 1
    };
    
    const api = apiClient(user, apiOptions);

    // T·∫°o payload cho request l·∫•y b√†i PiKnow
    const payload = qs.stringify({
      component: "know",
      action: "get-list",
      search: "",
      user_name: user.piname,
      english_version: 0,
      selected_country: 1,
      selected_chain: 0,
    });

    // G·ª≠i request l·∫•y danh s√°ch b√†i PiKnow
    const response = await api.post("/vapi", payload);

    // Log response status
    console.log(`>> Response status cho user ${user.piname}: ${response.status}`);
    
    if (response.data && response.data.data && response.data.data.status === 1 && Array.isArray(response.data.data.data)) {
      const knows = response.data.data.data;
      const knowIds = knows.map(item => item.id);
      console.log(`‚úÖ ƒê√£ l·∫•y ƒë∆∞·ª£c ${knowIds.length} b√†i PiKnow cho user ${user.piname}`);
      return knowIds;
    } else {
      console.error(`‚ùå D·ªØ li·ªáu PiKnow kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng cho user ${user.piname}:`, JSON.stringify(response.data));
      
      // Th·ª≠ ph∆∞∆°ng th·ª©c fallback v·ªõi action=index n·∫øu action=get-list kh√¥ng th√†nh c√¥ng
      if (!options.usedFallback) {
        console.log(`>> üîÑ Th·ª≠ ph∆∞∆°ng th·ª©c thay th·∫ø v·ªõi action=index cho user ${user.piname}`);
        
        // T·∫°o payload fallback
        const fallbackPayload = qs.stringify({
          component: "know",
          action: "index",
          user_name: user.piname,
          english_version: 0,
          selected_country: 1,
          selected_chain: 0,
        });
        
        try {
          const fallbackResponse = await api.post("/vapi", fallbackPayload);
          console.log(`>> Response status (fallback) cho user ${user.piname}: ${fallbackResponse.status}`);
          
          if (fallbackResponse.data && fallbackResponse.data.data && Array.isArray(fallbackResponse.data.data.knows)) {
            const fallbackKnows = fallbackResponse.data.data.knows;
            const fallbackKnowIds = fallbackKnows.map(item => item.id);
            console.log(`‚úÖ ƒê√£ l·∫•y ƒë∆∞·ª£c ${fallbackKnowIds.length} b√†i PiKnow (ph∆∞∆°ng th·ª©c thay th·∫ø) cho user ${user.piname}`);
            return fallbackKnowIds;
          } else {
            console.error(`‚ùå D·ªØ li·ªáu PiKnow kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng (ph∆∞∆°ng th·ª©c thay th·∫ø) cho user ${user.piname}:`, JSON.stringify(fallbackResponse.data));
          }
        } catch (fallbackError) {
          console.error(`‚ùå L·ªói khi th·ª≠ ph∆∞∆°ng th·ª©c thay th·∫ø cho user ${user.piname}: ${fallbackError.message}`);
        }
      }
      
      return [];
    }
  } catch (error) {
    console.error(`‚ùå L·ªói khi l·∫•y post PiKnow cho user ${user.piname}: ${error.message}`);
    
    if (error.response) {
      console.error(`M√£ l·ªói: ${error.response.status}`);
      console.error(`URL g·ªçi: ${error.config?.url}`);
      console.error(`URL ƒë·∫ßy ƒë·ªß: ${error.config?.baseURL}${error.config?.url}`);
      console.error(`Ph∆∞∆°ng th·ª©c: ${error.config?.method.toUpperCase()}`);
      
      // N·∫øu g·∫∑p l·ªói 429 v√† c√≤n c∆° h·ªôi retry
      if (error.response.status === 429 && retry < maxRetries) {
        console.log(`>> üîÑ G·∫∑p l·ªói 429 khi l·∫•y b√†i PiKnow cho user ${user.piname}, s·∫Ω th·ª≠ l·∫°i sau ${delayBetweenRetries/1000}s (l·∫ßn ${retry + 1}/${maxRetries})`);
        
        // ƒê·ªïi proxy n·∫øu c√≥ ProxyManager
        if (proxyManager) {
          // ƒê√°nh d·∫•u proxy hi·ªán t·∫°i l√† kh√¥ng ho·∫°t ƒë·ªông
          if (user.proxy) {
            proxyManager.markProxyAsInactive(user.proxy);
          }
          
          // L·∫•y proxy m·ªõi
          const newProxy = proxyManager.getProxy();
          if (newProxy) {
            console.log(`>> üîÑ ƒê·ªïi proxy cho user ${user.piname}: ${newProxy.host}:${newProxy.port}`);
            user.proxy = newProxy;
          }
        }
        
        // Ch·ªù m·ªôt kho·∫£ng th·ªùi gian tr∆∞·ªõc khi th·ª≠ l·∫°i
        await new Promise(resolve => setTimeout(resolve, delayBetweenRetries));
        
        // Th·ª≠ l·∫°i v·ªõi proxy m·ªõi
        return getAllPostPiKnow(user, { 
          ...options, 
          retry: retry + 1,
          delayBetweenRetries: delayBetweenRetries * 1.5, // TƒÉng th·ªùi gian ch·ªù gi·ªØa c√°c l·∫ßn retry
          usedFallback: options.usedFallback // Gi·ªØ tr·∫°ng th√°i ƒë√£ th·ª≠ fallback
        });
      }
    }
    
    return [];
  }
}

module.exports = getAllPostPiKnow;
