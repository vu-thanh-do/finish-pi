const PiKnowClusterManager = require('../../piknow-cluster-manager');
const getAllPostPiKnow = require('./getAllPostPiKnow');
const ExcelReaderService = require('../models/excelSheed');
const path = require('path');

function splitIntoWords(text) {
  return text.split(/\s+/).filter(word => word.length > 0);
}

function splitIntoPhrases(text) {
  return text.split(/[,.!?;]/)
    .map(chunk => chunk.trim())
    .filter(chunk => chunk.length > 0);
}

function getRandomElement(array) {
  return array[Math.floor(Math.random() * array.length)];
}

function generateMixedPiKnowMessage(piknowMessages) {
  const wordPool = piknowMessages.reduce((acc, text) => {
    if (text) {
      acc.push(...splitIntoWords(text));
    }
    return acc;
  }, []);

  const phrasePool = piknowMessages.reduce((acc, text) => {
    if (text) {
      acc.push(...splitIntoPhrases(text));
    }
    return acc;
  }, []);

  const mixingStyle = Math.floor(Math.random() * 5);

  switch (mixingStyle) {
    case 0:
      return getRandomElement(piknowMessages);

    case 1:
      const numWords = Math.floor(Math.random() * 2) + 2;
      const words = [];
      for (let i = 0; i < numWords; i++) {
        words.push(getRandomElement(wordPool));
      }
      return words.join(' ');

    case 2:
      const phrase = getRandomElement(phrasePool);
      const word = getRandomElement(wordPool);
      return `${phrase} ${word}`;

    case 3:
      const phrases = [
        getRandomElement(phrasePool),
        getRandomElement(phrasePool)
      ];
      return phrases.join(', ');

    case 4:
      const firstWord = getRandomElement(wordPool);
      const middlePhrase = getRandomElement(phrasePool);
      const lastWord = getRandomElement(wordPool);
      return `${firstWord} ${middlePhrase} ${lastWord}`;
  }
}

class PiKnowService {
  constructor() {
    this.piknowClusterManager = null;
    this.proxyManager = null;
    this.numWorkers = 4;
    this.concurrentTasksPerWorker = 5;
    this.users = [];
    this.configured = false;
    this.userPostsMap = new Map(); // L∆∞u tr·ªØ danh s√°ch b√†i PiKnow c·ªßa t·ª´ng user
    this.piknowMessages = [];
  }

  configureService(config = {}) {
    this.numWorkers = config.numWorkers || this.numWorkers;
    this.concurrentTasksPerWorker = config.concurrentTasksPerWorker || this.concurrentTasksPerWorker;
    this.proxyManager = config.proxyManager || this.proxyManager;
    this.users = config.users || this.users;
    this.configured = true;

    console.log(`>> PiKnowService ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh v·ªõi ${this.numWorkers} workers v√† ${this.concurrentTasksPerWorker} tasks/worker`);
    if (this.proxyManager) {
      if (typeof this.proxyManager.getProxyStats === 'function') {
        console.log(`>> ƒê√£ k·∫øt n·ªëi v·ªõi ProxyManager (${this.proxyManager.getProxyStats().active} proxy ho·∫°t ƒë·ªông)`);
      } else {
        console.log(`>> ƒê√£ k·∫øt n·ªëi v·ªõi ProxyManager (kh√¥ng th·ªÉ l·∫•y s·ªë l∆∞·ª£ng proxy ho·∫°t ƒë·ªông)`);
      }
    }
    
    // Kh·ªüi t·∫°o PiKnowClusterManager
    const clusterConfig = {
      numWorkers: this.numWorkers,
      concurrentTasksPerWorker: this.concurrentTasksPerWorker
    };
    
    // Ch·ªâ th√™m proxyManager v√†o c·∫•u h√¨nh n·∫øu n√≥ t·ªìn t·∫°i v√† c√≥ ph∆∞∆°ng th·ª©c getProxy
    if (this.proxyManager && typeof this.proxyManager.getProxy === 'function') {
      clusterConfig.proxyManager = this.proxyManager;
    }
    
    this.piknowClusterManager = new PiKnowClusterManager(clusterConfig);

    console.log(`>> PiKnowClusterManager ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng`);
  }

  async getKnowIds(user) {
    console.log(`>> ƒêang l·∫•y b√†i PiKnow cho user ${user.piname}...`);
    try {
      // L·∫•y danh s√°ch b√†i PiKnow c·ªßa user
      const knowIds = await getAllPostPiKnow(user);
      console.log(`>> ƒê√£ l·∫•y ƒë∆∞·ª£c ${knowIds.length} b√†i PiKnow cho user ${user.piname}`);
      return knowIds;
    } catch (error) {
      console.error(`>> L·ªói khi l·∫•y danh s√°ch b√†i PiKnow cho user ${user.piname}: ${error.message}`);
      throw error;
    }
  }

  async generatePiKnowTasks(piknowCount) {
    try {
      let userList = this.users;
      
      // N·∫øu kh√¥ng c√≥ users t·ª´ c·∫•u h√¨nh, ƒë·ªçc t·ª´ Excel
      if (!userList || userList.length === 0) {
        // ƒê·ªçc d·ªØ li·ªáu t·ª´ file Excel
        const excelPath = path.join(__dirname, '../data/PI.xlsx');
        console.log(`>> ƒê√£ t√¨m th·∫•y file Excel t·∫°i: ${excelPath}`);
        const excelReader = new ExcelReaderService(excelPath);
        const excelData = excelReader.readAllSheets();
        
        // L·∫•y d·ªØ li·ªáu c·ªßa c√°c c·ªôt c·∫ßn thi·∫øt
        const uid = excelData["prxageng"]?.["uid"] || [];
        const piname = excelData["prxageng"]?.["piname"] || [];
        const ukey = excelData["prxageng"]?.["ukey"] || [];
        const proxy = excelData["prxageng"]?.["proxy"] || [];
        const piknow = excelData["piknow"]?.["piknow"] || [];
        
        // L∆∞u c√°c tin nh·∫Øn PiKnow ƒë·ªÉ t·∫°o n·ªôi dung
        this.piknowMessages = piknow.filter(msg => msg && msg.trim() !== '');
        
        if (this.piknowMessages.length === 0) {
          this.piknowMessages = [
            "R·∫•t hay v√† b·ªï √≠ch!",
            "Th√¥ng tin qu√° tuy·ªát v·ªùi!",
            "C·∫£m ∆°n v√¨ ki·∫øn th·ª©c n√†y!",
            "T√¥i r·∫•t th√≠ch n·ªôi dung c·ªßa b·∫°n",
            "Th·∫≠t s·ª± h·ªØu √≠ch!",
            "Ti·∫øp t·ª•c cung c·∫•p nh·ªØng ki·∫øn th·ª©c nh∆∞ v·∫≠y!",
            "R·∫•t th√∫ v·ªã!",
            "C√¢u tr·∫£ l·ªùi hay qu√°!",
            "T√¥i h·ªçc ƒë∆∞·ª£c nhi·ªÅu ƒëi·ªÅu t·ª´ b·∫°n",
            "Ki·∫øn th·ª©c ƒë∆∞·ª£c tr√¨nh b√†y r·∫•t r√µ r√†ng",
            "Th√¥ng tin h·ªØu √≠ch!",
            "Tuy·ªát v·ªùi!"
          ];
        }
        
        console.log(`>> ƒê√£ t·∫£i ${this.piknowMessages.length} m·∫´u n·ªôi dung PiKnow t·ª´ Excel`);
        
        // T·∫°o ƒë·ªëi t∆∞·ª£ng user cho m·ªói d√≤ng
        userList = [];
        for (let i = 0; i < uid.length; i++) {
          if (uid[i] && piname[i] && ukey[i]) {
            const proxyInfo = proxy[i] ? proxy[i].split(':') : null;
            
            userList.push({
              uid: uid[i],
              piname: piname[i],
              ukey: ukey[i],
              proxy: proxyInfo ? {
                host: proxyInfo[0],
                port: proxyInfo[1],
                name: proxyInfo[2],
                password: proxyInfo[3]
              } : null
            });
          }
        }
      }
      
      console.log(`>> T√¨m th·∫•y ${userList.length} users t·ª´ file Excel`);
      
      // L·∫•y danh s√°ch b√†i PiKnow cho t·ª´ng user
      console.log(`>> ƒêang l·∫•y danh s√°ch b√†i PiKnow cho ${userList.length} users...`);
      
      // Danh s√°ch user ƒë√£ th·ª≠ l·∫•y PiKnow nh∆∞ng th·∫•t b·∫°i do l·ªói 429
      const usersWithoutPiKnow = [];
      // S·ªë l·∫ßn retry t·ªëi ƒëa cho m·ªói user
      const maxUserRetries = 3;
      
      // L·∫•y b√†i PiKnow cho t·ª´ng user v·ªõi x·ª≠ l√Ω batch ƒë·ªÉ tr√°nh qu√° t·∫£i
      const BATCH_SIZE = 20; // S·ªë l∆∞·ª£ng user x·ª≠ l√Ω c√πng l√∫c
      const userBatches = [];
      
      // Chia userList th√†nh c√°c batch nh·ªè
      for (let i = 0; i < userList.length; i += BATCH_SIZE) {
        userBatches.push(userList.slice(i, i + BATCH_SIZE));
      }
      
      console.log(`>> Chia th√†nh ${userBatches.length} batch, m·ªói batch ${BATCH_SIZE} users`);
      
      for (let batchIndex = 0; batchIndex < userBatches.length; batchIndex++) {
        const userBatch = userBatches[batchIndex];
        console.log(`>> ƒêang x·ª≠ l√Ω batch ${batchIndex + 1}/${userBatches.length}...`);
        
        // X·ª≠ l√Ω t·ª´ng batch v·ªõi Promise.all
        await Promise.all(userBatch.map(async (user) => {
          let retryCount = 0;
          let success = false;
          
          while (retryCount < maxUserRetries && !success) {
            try {
              // N·∫øu user ch∆∞a c√≥ trong userPostsMap ho·∫∑c ƒë√£ th·ª≠ nh∆∞ng th·∫•t b·∫°i, th√¨ l·∫•y l·∫°i
              if (!this.userPostsMap.has(user.uid) || this.userPostsMap.get(user.uid).length === 0) {
                // Thay ƒë·ªïi proxy n·∫øu ƒë√¢y l√† l·∫ßn retry v√† c√≥ ProxyManager
                if (retryCount > 0 && this.proxyManager) {
                  try {
                    if (typeof this.proxyManager.getProxy === 'function') {
                      const newProxy = this.proxyManager.getProxy();
                      if (newProxy) {
                        console.log(`>> üîÑ Thay ƒë·ªïi proxy cho user ${user.piname} do l·ªói tr∆∞·ªõc ƒë√≥: ${newProxy.host}:${newProxy.port}`);
                        user.proxy = newProxy;
                      }
                    } else {
                      console.warn(`>> C·∫¢NH B√ÅO: proxyManager kh√¥ng c√≥ ph∆∞∆°ng th·ª©c getProxy()`);
                    }
                  } catch (error) {
                    console.warn(`>> C·∫¢NH B√ÅO: L·ªói khi l·∫•y proxy m·ªõi: ${error.message}`);
                  }
                }
                
                // Th√™m delay gi·ªØa c√°c l·∫ßn g·ªçi API ƒë·ªÉ tr√°nh l·ªói 429
                if (retryCount > 0) {
                  const delay = 3000 * (retryCount + 1);
                  console.log(`>> Ch·ªù ${delay/1000}s tr∆∞·ªõc khi th·ª≠ l·∫°i cho user ${user.piname}`);
                  await new Promise(resolve => setTimeout(resolve, delay));
                }
                
                const options = {
                  maxRetries: 2,
                  delayBetweenRetries: 3000
                };
                
                // Ch·ªâ th√™m proxyManager v√†o options n·∫øu n√≥ t·ªìn t·∫°i v√† c√≥ ph∆∞∆°ng th·ª©c getProxy
                if (this.proxyManager && typeof this.proxyManager.getProxy === 'function') {
                  options.proxyManager = this.proxyManager;
                }
                
                try {
                  const knowIds = await getAllPostPiKnow(user, options);
                  
                  if (knowIds && knowIds.length > 0) {
                    this.userPostsMap.set(user.uid, knowIds);
                    success = true;
                    console.log(`>> ƒê√£ l·∫•y ƒë∆∞·ª£c ${knowIds.length} b√†i PiKnow cho user ${user.piname}`);
                  } else {
                    retryCount++;
                    console.log(`>> Kh√¥ng c√≥ b√†i PiKnow ho·∫∑c l·ªói. Th·ª≠ l·∫°i l·∫ßn ${retryCount}/${maxUserRetries} cho user ${user.piname}`);
                  }
                } catch (error) {
                  retryCount++;
                  console.error(`>> L·ªói khi l·∫•y b√†i PiKnow cho user ${user.piname}: ${error.message}`);
                  // Th√™m random delay ƒë·ªÉ tr√°nh l·ªói 429
                  const randomDelay = 1000 + Math.floor(Math.random() * 2000);
                  await new Promise(resolve => setTimeout(resolve, randomDelay));
                }
              } else {
                // User ƒë√£ c√≥ b√†i PiKnow trong cache
                success = true;
              }
            } catch (error) {
              retryCount++;
              console.error(`>> L·ªói khi l·∫•y b√†i PiKnow cho user ${user.piname}: ${error.message}`);
            }
          }
          
          // N·∫øu sau t·∫•t c·∫£ c√°c l·∫ßn th·ª≠ v·∫´n kh√¥ng th√†nh c√¥ng, th√™m v√†o danh s√°ch user kh√¥ng c√≥ PiKnow
          if (!success) {
            usersWithoutPiKnow.push(user);
          }
        }));
        
        // Th√™m delay gi·ªØa c√°c batch
        if (batchIndex < userBatches.length - 1) {
          console.log(`>> ƒê·ª£i 5 gi√¢y tr∆∞·ªõc khi x·ª≠ l√Ω batch ti·∫øp theo...`);
          await new Promise(resolve => setTimeout(resolve, 5000));
        }
      }
      
      // B√°o c√°o s·ªë l∆∞·ª£ng user kh√¥ng c√≥ PiKnow
      if (usersWithoutPiKnow.length > 0) {
        console.log(`>> C√≥ ${usersWithoutPiKnow.length}/${userList.length} user kh√¥ng l·∫•y ƒë∆∞·ª£c b√†i PiKnow sau nhi·ªÅu l·∫ßn th·ª≠`);
      }
      
      // T·∫°o c√°c task PiKnow
      const tasks = [];
      const usedIds = new Map(); // ƒê·ªÉ theo d√µi ID ƒë√£ s·ª≠ d·ª•ng cho m·ªói user
      let totalRequiredTasks = 0; // T·ªïng s·ªë t√°c v·ª• c·∫ßn th·ª±c hi·ªán
      
      // ƒê·∫øm s·ªë l∆∞·ª£ng user c√≥ b√†i PiKnow
      const usersWithPiKnow = userList.filter(user => {
        const userKnowIds = this.userPostsMap.get(user.uid) || [];
        return userKnowIds.length > 0;
      });
      
      console.log(`>> C√≥ ${usersWithPiKnow.length}/${userList.length} users c√≥ b√†i PiKnow kh·∫£ d·ª•ng`);
      
      // ∆Øu ti√™n x·ª≠ l√Ω proxy tr∆∞·ªõc
      if (this.proxyManager) {
        const userAssignments = [];
        
        try {
          // N·∫øu proxyManager c√≥ ph∆∞∆°ng th·ª©c assignProxiesToUsers, s·ª≠ d·ª•ng n√≥
          if (typeof this.proxyManager.assignProxiesToUsers === 'function') {
            const proxyAssignments = this.proxyManager.assignProxiesToUsers(usersWithPiKnow);
            if (proxyAssignments && proxyAssignments.length > 0) {
              console.log(`>> ƒê√£ ph√¢n b·ªï proxy cho ${proxyAssignments.length}/${usersWithPiKnow.length} users`);
              
              // C·∫≠p nh·∫≠t proxy t·ª´ ph√¢n b·ªï
              proxyAssignments.forEach(assignment => {
                const userIndex = usersWithPiKnow.findIndex(u => u.uid === assignment.user.uid);
                if (userIndex !== -1) {
                  usersWithPiKnow[userIndex].proxy = assignment.proxy;
                }
              });
            }
          } else {
            // Ph√¢n b·ªï proxy th·ªß c√¥ng n·∫øu kh√¥ng c√≥ assignProxiesToUsers
            console.log(`>> Ph√¢n b·ªï proxy th·ªß c√¥ng cho ${usersWithPiKnow.length} users`);
            for (const user of usersWithPiKnow) {
              if (!user.proxy && this.proxyManager) {
                try {
                  if (typeof this.proxyManager.getProxy === 'function') {
                    const proxy = this.proxyManager.getProxy();
                    if (proxy) {
                      user.proxy = proxy;
                      console.log(`>> ƒê√£ g√°n proxy ${proxy.host}:${proxy.port} cho user ${user.piname}`);
                    }
                  }
                } catch (error) {
                  console.warn(`>> C·∫¢NH B√ÅO: L·ªói khi l·∫•y proxy cho user ${user.piname}: ${error.message}`);
                }
              }
            }
          }
        } catch (error) {
          console.warn(`>> C·∫¢NH B√ÅO: L·ªói khi ph√¢n b·ªï proxy cho users: ${error.message}`);
        }
      }
      
      // Ti·∫øp t·ª•c v·ªõi c√°c user c√≥ b√†i PiKnow
      for (const user of usersWithPiKnow) {
        // Ki·ªÉm tra user c√≥ proxy kh√¥ng, n·∫øu kh√¥ng th√¨ b·ªè qua ho·∫∑c l·∫•y l·∫°i
        if (!user.proxy && this.proxyManager) {
          try {
            if (typeof this.proxyManager.getProxy === 'function') {
              const proxy = this.proxyManager.getProxy();
              if (proxy) {
                user.proxy = proxy;
                console.log(`>> ƒê√£ g√°n proxy cho user ${user.piname}: ${proxy.host}:${proxy.port}`);
              } else {
                console.warn(`>> C·∫¢NH B√ÅO: Kh√¥ng l·∫•y ƒë∆∞·ª£c proxy t·ª´ proxyManager cho user ${user.piname}`);
                // V·∫´n ti·∫øp t·ª•c v·ªõi user kh√¥ng c√≥ proxy, worker s·∫Ω x·ª≠ l√Ω
              }
            } else {
              console.warn(`>> C·∫¢NH B√ÅO: proxyManager kh√¥ng c√≥ ph∆∞∆°ng th·ª©c getProxy() cho user ${user.uid}`);
            }
          } catch (error) {
            console.warn(`>> C·∫¢NH B√ÅO: L·ªói khi l·∫•y proxy cho user ${user.piname}: ${error.message}`);
          }
        }
        
        // Ki·ªÉm tra user c√≥ b√†i PiKnow kh√¥ng
        const userKnowIds = this.userPostsMap.get(user.uid) || [];
        if (userKnowIds.length === 0) {
          console.log(`>> B·ªè qua user ${user.piname} v√¨ kh√¥ng c√≥ b√†i PiKnow`);
          continue;
        }
        
        // T√≠nh t·ªïng s·ªë t√°c v·ª• c·∫ßn th·ª±c hi·ªán
        totalRequiredTasks += piknowCount;
        
        if (!usedIds.has(user.uid)) {
          usedIds.set(user.uid, new Set());
        }
        const userUsedIds = usedIds.get(user.uid);
        
        // T·∫°o piknowCount tasks cho m·ªói user
        for (let i = 0; i < piknowCount; i++) {
          // L·∫•y danh s√°ch ID ch∆∞a s·ª≠ d·ª•ng
          let availableIds = userKnowIds.filter(id => !userUsedIds.has(id));
          // N·∫øu ƒë√£ d√πng h·∫øt, reset danh s√°ch
          if (availableIds.length === 0) {
            userUsedIds.clear();
            availableIds = userKnowIds;
          }
          
          // Ch·ªçn ng·∫´u nhi√™n m·ªôt ID
          const randomIndex = Math.floor(Math.random() * availableIds.length);
          const selectedId = availableIds[randomIndex];
          userUsedIds.add(selectedId);
          
          // T·∫°o n·ªôi dung PiKnow ng·∫´u nhi√™n b·∫£o ƒë·∫£m h·ª£p l·ªá
          let piknowText = "";
          try {
            piknowText = generateMixedPiKnowMessage(this.piknowMessages);
            // Ki·ªÉm tra n·ªôi dung kh√¥ng c√≥ undefined v√† kh√¥ng r·ªóng
            if (!piknowText || piknowText.includes('undefined') || piknowText.trim() === '') {
              const defaultMessages = [
                "R·∫•t hay v√† b·ªï √≠ch!",
                "Th√¥ng tin qu√° tuy·ªát v·ªùi!",
                "C·∫£m ∆°n v√¨ ki·∫øn th·ª©c n√†y!",
                "T√¥i r·∫•t th√≠ch n·ªôi dung c·ªßa b·∫°n",
                "Th·∫≠t s·ª± h·ªØu √≠ch!"
              ];
              const randomIndex = Math.floor(Math.random() * defaultMessages.length);
              piknowText = defaultMessages[randomIndex];
              console.log(`>> ƒê√£ t·∫°o n·ªôi dung m·∫∑c ƒë·ªãnh cho task (${i+1}/${piknowCount}) c·ªßa user ${user.piname}`);
            }
          } catch (error) {
            // N·∫øu c√≥ l·ªói khi t·∫°o n·ªôi dung, s·ª≠ d·ª•ng n·ªôi dung m·∫∑c ƒë·ªãnh
            piknowText = "R·∫•t hay v√† b·ªï √≠ch!";
            console.warn(`>> C·∫¢NH B√ÅO: L·ªói khi t·∫°o n·ªôi dung PiKnow: ${error.message}`);
          }
          
          tasks.push({
            piknowUser: user,
            knowId: selectedId,
            piknowText
          });
        }
      }
      
      // Ki·ªÉm tra xem ƒë√£ ƒë·ªß s·ªë l∆∞·ª£ng t√°c v·ª• ch∆∞a
      if (tasks.length < totalRequiredTasks) {
        console.log(`>> ‚ö†Ô∏è CH√ö √ù: Ch·ªâ t·∫°o ƒë∆∞·ª£c ${tasks.length}/${totalRequiredTasks} t√°c v·ª• c·∫ßn thi·∫øt (${totalRequiredTasks - tasks.length} thi·∫øu)`);
      } else {
        console.log(`>> ‚úÖ ƒê√£ t·∫°o ƒë·ªß ${tasks.length} t√°c v·ª• PiKnow theo y√™u c·∫ßu`);
      }
      
      console.log(`>> ƒê√£ t·∫°o ${tasks.length} t√°c v·ª• PiKnow`);
      return {
        tasks,
        totalRequired: totalRequiredTasks, 
        missingCount: totalRequiredTasks - tasks.length
      };
    } catch (error) {
      console.error(`>> L·ªói khi t·∫°o t√°c v·ª• PiKnow: ${error.message}`);
      throw error;
    }
  }

  async executePiKnowTasks(tasks) {
    try {
      console.log(`>> ƒê√£ t·∫°o ${tasks.length} t√°c v·ª• PiKnow`);
      console.log(`>> B·∫Øt ƒë·∫ßu th·ª±c thi ${tasks.length} t√°c v·ª• PiKnow...`);
      
      // N·∫øu ch∆∞a c·∫•u h√¨nh, kh·ªüi t·∫°o PiKnowClusterManager v·ªõi c·∫•u h√¨nh m·∫∑c ƒë·ªãnh
      if (!this.configured || !this.piknowClusterManager) {
        console.log(`>> Chu·∫©n b·ªã th·ª±c thi ${tasks.length} t√°c v·ª• PiKnow song song v·ªõi ${this.numWorkers} CPUs`);
        
        const clusterConfig = {
          numWorkers: this.numWorkers,
          concurrentTasksPerWorker: this.concurrentTasksPerWorker,
          workerTimeout: 45000, // 45 gi√¢y
          proxyRotateInterval: 30, // ƒê·ªïi proxy sau 30 t√°c v·ª•
          useMissingTaskTracker: true // K√≠ch ho·∫°t theo d√µi task thi·∫øu
        };
        
        // Ch·ªâ th√™m proxyManager v√†o c·∫•u h√¨nh n·∫øu n√≥ t·ªìn t·∫°i v√† c√≥ ph∆∞∆°ng th·ª©c getProxy
        if (this.proxyManager && typeof this.proxyManager.getProxy === 'function') {
          clusterConfig.proxyManager = this.proxyManager;
        }
        
        this.piknowClusterManager = new PiKnowClusterManager(clusterConfig);
      }
      
      // Th·ª±c thi c√°c task v√† l·∫•y k·∫øt qu·∫£
      const results = await this.piknowClusterManager.executeTasks(tasks);
      
      // T√≠nh to√°n s·ªë l∆∞·ª£ng th√†nh c√¥ng v√† th·∫•t b·∫°i
      const successCount = results.filter(result => result.success).length;
      const failCount = results.length - successCount;
      
      console.log(`>> K·∫øt qu·∫£: ${successCount} PiKnow th√†nh c√¥ng, ${failCount} PiKnow th·∫•t b·∫°i`);
      
      // D·ªçn d·∫πp t√†i nguy√™n
      this.piknowClusterManager.cleanup();
      console.log(`>> ƒê√£ d·ªçn d·∫πp t√†i nguy√™n PiKnowClusterManager`);
      
      // Ph√¢n t√≠ch l·ªói n·∫øu c√≥
      if (failCount > 0) {
        const failedResults = results.filter(result => !result.success);
        const errorCounts = {};
        
        failedResults.forEach(result => {
          const errorType = result.error || 'Unknown error';
          errorCounts[errorType] = (errorCounts[errorType] || 0) + 1;
        });
        
        console.log(`>> L·ªói trong qu√° tr√¨nh PiKnow:`, Object.keys(errorCounts).length > 0 ? 
          Object.entries(errorCounts)
            .sort((a, b) => b[1] - a[1])
            .slice(0, 3)
            .map(([error, count]) => `${error}: ${count} l·∫ßn`)
            .join(', ') 
          : 'Kh√¥ng c√≥ th√¥ng tin l·ªói chi ti·∫øt'
        );
      }
      
      return {
        success: successCount,
        failure: failCount,
        total: tasks.length,
        piknowedIds: results.filter(r => r.success).map(r => r.knowId),
        missedCount: tasks.length - successCount - failCount
      };
    } catch (error) {
      console.error(`>> L·ªói khi th·ª±c thi t√°c v·ª• PiKnow: ${error.message}`);
      if (this.piknowClusterManager) {
        this.piknowClusterManager.cleanup();
      }
      throw error;
    }
  }

  async startPiKnowProcess(piknowCount) {
    try {
      console.log(`>> B·∫Øt ƒë·∫ßu qu√° tr√¨nh PiKnow v·ªõi ${piknowCount} b√†i cho m·ªói user`);
      
      // T·∫°o c√°c t√°c v·ª• PiKnow
      const { tasks, totalRequired, missingCount } = await this.generatePiKnowTasks(piknowCount);
      
      if (tasks.length === 0) {
        console.error(">> Kh√¥ng c√≥ t√°c v·ª• PiKnow n√†o ƒë∆∞·ª£c t·∫°o!");
        return {
          success: 0,
          failure: 0,
          total: 0,
          piknowedIds: [],
          error: "Kh√¥ng c√≥ t√°c v·ª• PiKnow n√†o ƒë∆∞·ª£c t·∫°o"
        };
      }
      
      // Th·ª±c thi c√°c t√°c v·ª• PiKnow
      const result = await this.executePiKnowTasks(tasks);
      
      // Ki·ªÉm tra n·∫øu s·ªë l∆∞·ª£ng PiKnow th√†nh c√¥ng ch∆∞a ƒë·ªß so v·ªõi y√™u c·∫ßu
      const targetSuccess = totalRequired;
      const currentSuccess = result.success;
      
      if (currentSuccess < targetSuccess) {
        console.log(`\n>> ‚ö†Ô∏è CH√ö √ù: Ch·ªâ ho√†n th√†nh ${currentSuccess}/${targetSuccess} PiKnow th√†nh c√¥ng theo y√™u c·∫ßu`);
        console.log(`>> C√≤n thi·∫øu ${targetSuccess - currentSuccess} PiKnow th√†nh c√¥ng`);
        
        // T√≠nh s·ªë l∆∞·ª£ng t√°c v·ª• c√≤n thi·∫øu c·∫ßn th·ª±c hi·ªán b·ªï sung
        const additionalTasksCount = targetSuccess - currentSuccess;
        if (additionalTasksCount > 0 && missingCount === 0) {
          console.log(`>> üîÑ Th·ª±c hi·ªán b·ªï sung ${additionalTasksCount} t√°c v·ª• PiKnow ƒë·ªÉ ƒë·∫°t m·ª•c ti√™u`);
          
          // T·∫°o th√™m t√°c v·ª• PiKnow ƒë·ªÉ ƒë·∫°t ƒë·ªß s·ªë l∆∞·ª£ng
          const { tasks: additionalTasks } = await this.generatePiKnowTasks(additionalTasksCount);
          
          if (additionalTasks.length > 0) {
            console.log(`>> üîÑ ƒê√£ t·∫°o ${additionalTasks.length} t√°c v·ª• PiKnow b·ªï sung`);
            
            // Th·ª±c hi·ªán c√°c t√°c v·ª• b·ªï sung
            const additionalResult = await this.executePiKnowTasks(additionalTasks);
            
            // T√≠nh to√°n k·∫øt qu·∫£ t·ªïng h·ª£p
            const finalResult = {
              success: result.success + additionalResult.success,
              failure: result.failure + additionalResult.failure,
              total: result.total + additionalResult.total,
              piknowedIds: [...result.piknowedIds, ...additionalResult.piknowedIds],
              isRetried: true
            };
            
            console.log(`\n>> K·∫øt qu·∫£ sau khi th·ª±c hi·ªán b·ªï sung: ${finalResult.success}/${finalResult.total} PiKnow th√†nh c√¥ng`);
            return finalResult;
          } else {
            console.log(`>> ‚ùå Kh√¥ng th·ªÉ t·∫°o th√™m t√°c v·ª• PiKnow b·ªï sung`);
          }
        }
      }
      
      return {
        success: result.success,
        failure: result.failure,
        total: result.total,
        piknowedIds: result.piknowedIds
      };
    } catch (error) {
      console.error(`>> L·ªói trong qu√° tr√¨nh PiKnow: ${error.message}`);
      return {
        success: 0,
        failure: 0,
        total: 0,
        piknowedIds: [],
        error: error.message
      };
    }
  }
}

// Export m·ªôt instance c·ªßa PiKnowService
module.exports = new PiKnowService(); 